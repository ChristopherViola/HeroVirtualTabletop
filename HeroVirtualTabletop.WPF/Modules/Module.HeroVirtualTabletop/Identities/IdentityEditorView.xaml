<UserControl x:Class="Module.HeroVirtualTabletop.Identities.IdentityEditorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Module.HeroVirtualTabletop.Identities"
             xmlns:enumerations="clr-namespace:Module.HeroVirtualTabletop.Library.Enumerations"
             xmlns:convertes="clr-namespace:Module.HeroVirtualTabletop.Library.Converters"
             xmlns:system="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             Visibility="{Binding Visibility}">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Module.Shared;Component/Resources/ResourceDictionary/GeneralResources.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <ObjectDataProvider x:Key="IdentityTypes" MethodName="GetValues"
                            ObjectType="{x:Type system:Enum}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="enumerations:IdentityType"/>
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>
            <convertes:IdentityTypeConverter x:Key="identityTypeConverter"></convertes:IdentityTypeConverter>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <StackPanel>
            <Button x:Name="closeBtn" Content="&#xf00d;" ToolTip="Close" Command="{Binding CloseEditorCommand}" Margin="0,0,2,0">
                <Button.Template>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Ellipse x:Name="Circle" Fill="Transparent" Stroke="DarkGray" StrokeThickness="1"/>
                            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver"
                             Value="true">
                                <Setter Property="Stroke"
                                Value="Red"
                                TargetName="Circle"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Button.Template>
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="FontFamily" Value="{StaticResource FontFamily_FontAwesome}"/>
                        <Setter Property="FontSize" Value="15"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="Foreground" Value="DarkGray"/>
                        <Setter Property="Width" Value="20"/>
                        <Setter Property="Height" Value="20"/>
                        <Setter Property="HorizontalAlignment" Value="Right"/>
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver"
                             Value="true">
                                <Setter Property="Foreground" Value="Red"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <TextBox Name="txtBoxName" Text="{Binding Path=EditedIdentity.Name, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" Margin="5,5,5,5"></TextBox>

            <CheckBox Name="IsDefault" IsChecked="{Binding Path=IsDefault, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Content="Default Identity" Foreground="White" Margin="5"/>

            <ComboBox
                Name="cbBoxType"
	            HorizontalAlignment="Stretch"
                Margin="5"
                ItemsSource="{Binding Source={StaticResource IdentityTypes}}"
                SelectedItem="{Binding Path=EditedIdentity.Type, Mode=TwoWay}">
            </ComboBox>

            <TextBox Name="FilterTextBox" Text="{Binding Filter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="5"/>

            <Grid x:Name="listGrid" Margin="5">
                <Grid.Resources>
                    <Style TargetType="{x:Type ListBox}">
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="TextElement.Foreground" Value="White"/>
                    </Style>
                </Grid.Resources>
                <ListBox x:Name="listBoxModels" 
                         VerticalAlignment="Top" MaxHeight="300" Width="300"
                         SelectionMode="Single"
                         ItemsSource="{Binding ModelsCVS.View}"
                         Visibility="{Binding Path=EditedIdentity.Type, Converter={StaticResource identityTypeConverter}, ConverterParameter=Model}"
                         SelectedValue="{Binding Path=EditedIdentity.Surface, Mode=TwoWay}"
                         IsSynchronizedWithCurrentItem="True">
                    <ListBox.Resources>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" Value="White"/>
                        </Style>
                    </ListBox.Resources>
                </ListBox>
                <ListBox x:Name="listBoxCostumes"
                         VerticalAlignment="Top" MaxHeight="300" Width="300"
                         SelectionMode="Single"
                         ItemsSource="{Binding CostumesCVS.View}"
                         Visibility="{Binding Path=EditedIdentity.Type, Converter={StaticResource identityTypeConverter}, ConverterParameter=Costume}"
                         SelectedValue="{Binding Path=EditedIdentity.Surface, Mode=TwoWay}"
                         IsSynchronizedWithCurrentItem="True">
                    <ListBox.Resources>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="TextElement.Foreground" Value="White"/>
                        </Style>
                    </ListBox.Resources>
                </ListBox>
            </Grid>
        </StackPanel>
    </Grid>
</UserControl>
