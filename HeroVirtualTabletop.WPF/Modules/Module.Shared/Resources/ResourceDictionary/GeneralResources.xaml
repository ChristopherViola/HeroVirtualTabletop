<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:System="clr-namespace:System;assembly=mscorlib"
    x:Class="Module.Shared.Resources.ResourceDictionary.GeneralResources" 
    xmlns:converters="clr-namespace:Module.Shared.Converters"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:shell="http://schemas.microsoft.com/winfx/2006/xaml/presentation/shell">
    
    
    <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:BooleanToVisibilityInvertConverter x:Key="BooleanToVisibilityInvertConverter"/>
    <converters:InvertBooleanConverter x:Key="InvertBooleanConverter"/>
    <converters:BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

    <FontFamily x:Key="FontFamily_FontAwesome">/Module.Shared;Component/Resources/Fonts/#FontAwesome</FontFamily>
    <System:Double x:Key="FontSize_Small">10</System:Double>
    <System:Double x:Key="FontSize_Medium">14</System:Double>
    <System:Double x:Key="FontSize_Big">26</System:Double>
    <FontWeight x:Key="FontWeight_Bold">Bold</FontWeight>

    <Style x:Key="CustomModelessTransparentWindow" TargetType="{x:Type Window}">
        <Setter Property="Topmost" Value="True"></Setter>
        <Setter Property="OverridesDefaultStyle" Value="True"></Setter>
        <Setter Property="TextElement.FontSize" Value="13"/>
        <Setter Property="TextElement.Foreground" Value="White"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="shell:WindowChrome.WindowChrome">
            <Setter.Value>
                <shell:WindowChrome GlassFrameThickness="-1" 
                            ResizeBorderThickness="0"
                            CaptionHeight="36"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid>
                        <Border Margin="0,20,0,0">
                            <ContentPresenter Content="{TemplateBinding Content}"/>
                        </Border>
                        <Border Margin="0,20,0,0" BorderBrush="#FF1144FF" BorderThickness="2" CornerRadius="10"
                                    Grid.ZIndex="-1" Background="#99000000">

                        </Border>
                        <Border Height="30" CornerRadius="30,30,0,0" VerticalAlignment="Top">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Setter Property="BorderThickness" Value="0,20,0,0"/>
                                    <Setter Property="BorderBrush" Value="#771144AA"></Setter>
                                </Style>
                            </Border.Style>
                        </Border>
                        <!--Window Title-->
                        <TextBlock VerticalAlignment="Top" Margin="4" TextAlignment="Center" x:Name="TitleTextBlock"
                                Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
    </Style>

    <Style TargetType="{x:Type TreeViewItem}" x:Key="searchableTreeViewItem">
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="CornerRadius" Value="3"/>
            </Style>
        </Style.Resources>
        <Setter Property="TextElement.Foreground" Value="White"/>
        <Setter Property="TextElement.FontSize" Value="15"></Setter>
        <Setter Property="BorderThickness" Value="1.5"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="#FFABC0F0"/>
                <Setter Property="TextElement.Foreground" Value="Black"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="LightGray"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SearchableTreeView" TargetType="{x:Type TreeView}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
            <LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFE0F0FF" Offset="0"/>
                <GradientStop Color="#FFABE0FF" Offset="1"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="{x:Static SystemColors.ControlBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFEEEEEE" Offset="0"/>
                <GradientStop Color="#FFDDDDDD" Offset="1"/>
            </LinearGradientBrush>
        </Style.Resources>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource searchableTreeViewItem}"/>
    </Style>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle 
            Margin="2"
            StrokeThickness="1"
            Stroke="#60000000"
            StrokeDashArray="1 2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Fill Brushes -->

    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#AAA" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <!-- Border Brushes -->

    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#777" Offset="0.0"/>
                <GradientStop Color="#000" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#444" Offset="0.0"/>
                <GradientStop Color="#888" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

    <!-- Miscellaneous Brushes -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />

    <Style x:Key="HeroVirtualTabletopButton" TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="3"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="#AA44AAFF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border 
                      x:Name="Border"  
                      CornerRadius="5" 
                      BorderThickness="1"
                      Background="#AA44AAFF"
                      BorderBrush="#FF44AAFF">
                                <ContentPresenter 
                        Margin="2"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        RecognizesAccessKey="True"/>    
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Cursor" Value="Hand"/>
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DefaultedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                            <Setter Property="Foreground" Value="#FF44AAFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="#882288FF" />
                            <Setter Property="Foreground" Value="#99EEEEEE"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource HeroVirtualTabletopButton}">
        <Setter Property="FontFamily" Value="{StaticResource FontFamily_FontAwesome}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize_Big}"/>
        <Setter Property="Width" Value="35"/>
    </Style>

    <Style x:Key="SearchBox" TargetType="{x:Type Border}">
        <Style.Resources>
            <ElasticEase x:Key="EaseInEase" EasingMode="EaseOut" Oscillations="2" Springiness="7"/>
            <SineEase x:Key="EaseOutEase" EasingMode="EaseIn"/>
        </Style.Resources>

        <Setter Property="Width" Value="30"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Panel.ZIndex" Value="1000"/>
        <!--The following commented properties need be set from design, not dictionary-->
        <!--<Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="4 4 20 4"/>-->
        <Setter Property="CornerRadius" Value="3"/>
        <Setter Property="BorderBrush" Value="DarkGray"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#F0F0F0" Offset="0.0" />
                    <GradientStop Color="#C0C0C0" Offset="1.0" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="(Border.Width)" EasingFunction="{StaticResource ResourceKey=EaseInEase}" To="150" Duration="0:0:1.0"/>
                        <!-- <DoubleAnimation Storyboard.TargetProperty="(Border.Height)" EasingFunction="{StaticResource ResourceKey=easeInEase}" To="30" Duration="0:0:1.0"/> -->
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="Mouse.MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation Storyboard.TargetProperty="(Border.Width)" EasingFunction="{StaticResource ResourceKey=EaseOutEase}" To="30" Duration="0:0:0.2"/>
                        <!-- <DoubleAnimation Storyboard.TargetProperty="(Border.Height)" EasingFunction="{StaticResource ResourceKey=easeOutEase}" To="30" Duration="0:0:0.2"/> -->
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SelectableTextBlockLikeStyle" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="-2,0,0,0"/>
        <Setter Property="Foreground" Value="White"/>
        <!-- The Padding -2,0,0,0 is required because the TextBox
        seems to have an inherent "Padding" of about 2 pixels.
        Without the Padding property,
        the text seems to be 2 pixels to the left
        compared to a TextBlock
    -->
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsFocused" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <TextBlock Text="{TemplateBinding Text}" 
                             FontSize="{TemplateBinding FontSize}"
                             FontStyle="{TemplateBinding FontStyle}"
                             FontFamily="{TemplateBinding FontFamily}"
                             FontWeight="{TemplateBinding FontWeight}"
                             TextWrapping="{TemplateBinding TextWrapping}"
                             
                             Padding="0,0,0,0"
                                       />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </MultiTrigger>
            <DataTrigger Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeViewItem}}" Value="True">
                <Setter Property="TextElement.Foreground" Value="Black"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="ExpanderToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    >
                    <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="2*"/>
                                <RowDefinition Height="3*"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0" VerticalAlignment="Bottom">
                                <Rectangle Fill="Transparent"/>
                                    <Ellipse Name="Circle"
                                 Stroke="DarkGray"
                                 Width="20"
                                 Height="20"
                                 HorizontalAlignment="Center"
                                 VerticalAlignment="Center"
                            />
                                <Path x:Name="Sign"
                              Data="M 0,5 H 10 M 5,0 V 10 Z"
                              Stroke="#FF666666"
                              Width="10"
                              Height="10"
                              StrokeThickness="2"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              RenderTransformOrigin="0.5,0.5"
                          >
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="0"/>
                                    </Path.RenderTransform>
                                </Path>
                            </Grid>

                            <ContentPresenter x:Name="HeaderContent"
                              Grid.Row="1"
                              VerticalAlignment="Top" Margin="0, 5, 0, 0"
                              ContentSource="Content"/>
                        </Grid>
                        </Border>
                    <ControlTemplate.Triggers>
                        <!--Change the sign to minus when toggled-->
                        <Trigger Property="IsChecked"
                     Value="True">
                            <Setter Property="Data" 
                   TargetName="Sign" Value="M 0,5 H 10 Z"/>
                        </Trigger>

                        <!-- MouseOver, Pressed behaviours-->
                        <Trigger Property="IsMouseOver"
                             Value="true">
                            <Setter Property="Stroke"
                                Value="#FF3C7FB1"
                                TargetName="Circle"/>
                            <Setter Property="Stroke"
                                Value="#222"
                                TargetName="Sign"/>
                        </Trigger>
                        <Trigger Property="IsPressed"
                             Value="true">
                            <Setter Property="Stroke"
                                Value="#FF526C7B"
                                TargetName="Circle"/>
                            <Setter Property="StrokeThickness"
                                Value="1.5"
                                TargetName="Circle"/>
                            <Setter Property="Stroke"
                                Value="#FF003366"
                                TargetName="Sign"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="100" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter x:Name="ExpanderContent" Grid.Column="0" Grid.RowSpan="3" 
                                    Visibility="Collapsed"/>
                        <Grid Grid.Column="1" Grid.Row="0" x:Name="TopRectangleArea">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0" HorizontalAlignment="Right" Fill="#FF1144FF" Width="1" Margin="0,3"/>
                                <Rectangle Grid.Column="1" HorizontalAlignment="Left" Fill="#FF1144FF" Width="1" Margin="2,3"/>
                            </Grid>
                        </Grid>
                        <Grid SnapsToDevicePixels="False" Background="Transparent" Grid.Row="1" Grid.Column="1" x:Name="ExpanderButtonArea">
                            <ToggleButton x:Name="ExpanderButton"
                                          DockPanel.Dock="Right"
                                          Style="{StaticResource ExpanderToggleButtonStyle}"
                                          IsChecked="{Binding Path=IsExpanded, 
                                          RelativeSource={RelativeSource TemplatedParent}}"
                                          OverridesDefaultStyle="True"
                                          Padding="1.5,0">
                                <ToggleButton.Content>
                                    <TextBlock Text="{Binding Path=Header, 
                                                        RelativeSource={RelativeSource TemplatedParent}}" >
                                        <TextBlock.LayoutTransform>
                                            <TransformGroup>
                                                <RotateTransform Angle="90"/>
                                            </TransformGroup>
                                        </TextBlock.LayoutTransform>
                                    </TextBlock>
                                </ToggleButton.Content>
                            </ToggleButton>
                        </Grid>
                        <Grid Grid.Column="1" Grid.Row="2" x:Name="BottomRectangleArea">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Rectangle Grid.Column="0" HorizontalAlignment="Right" Fill="#FF1144FF" Width="1" Margin="0,3"/>
                                <Rectangle Grid.Column="1" HorizontalAlignment="Left" Fill="#FF1144FF" Width="1" Margin="2,3"/>
                            </Grid>   
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderContent" 
                                Property="Visibility" Value="Visible"/>
                            <Setter TargetName="TopRectangleArea" 
                                Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ExpanderButtonArea" 
                                Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="BottomRectangleArea" 
                                Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="TopRectangleArea" 
                                Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ExpanderButtonArea" 
                                Property="Visibility" Value="Visible"/>
                            <Setter TargetName="BottomRectangleArea" 
                                Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type GroupBox}" x:Key="GroupBoxWithBlueBorderStyle">
        <Setter Property="BorderBrush" Value="#FF1144FF" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="6" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="6" />
                        </Grid.RowDefinitions>
                        <Border CornerRadius="4" Grid.Row="1" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="4" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" Background="{TemplateBinding Background}" />
                        <Border Name="Header" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
                                    <Binding ElementName="Header" Path="ActualWidth" />
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>